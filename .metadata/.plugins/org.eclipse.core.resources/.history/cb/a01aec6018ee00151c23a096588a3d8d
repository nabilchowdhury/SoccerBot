package soccerbot;

import lejos.hardware.motor.EV3LargeRegulatedMotor;

/**
 * Class which controls the odometer for the robot
 * 
 * Odometer defines cooridinate system as such...
 * 
 * 					0Deg:pos y-axis
 * 							|
 * 							|
 * 							|
 * 							|
 * 270Deg:neg x-axis------------------90Deg:pos x-axis
 * 							|
 * 							|
 * 							|
 * 							|
 * 					180Deg:neg y-axis
 * 
 * The odometer is initalized to 0 degrees, assuming the robot is facing up the positive y-axis
 */
public class Odometer extends Thread {
	// class constants: robot dimensions
	private static final double W_BASE = 13.68;	
	private static final double W_RADIUS = 2.096;
	
	// odometer update period, in ms
	private static final long ODOMETER_PERIOD = 25;
	
	// robot position
	private double x, y, theta;	// theta is in radians

	// lock object for mutual exclusion
	private Object lock;
	
	// class variables used to calculate x, y and theta
	private int lastTachoL;			// Tacho L at last sample
	private int lastTachoR;			// Tacho R at last sample 
	private int nowTachoL;			// Current tacho L
	private int nowTachoR;			// Current tacho R

	
	// motors
	private EV3LargeRegulatedMotor leftMotor, rightMotor;

	/**
	 * Constructor requires the motors used for navigating the robot to caluclate
	 * the distance travelled through math and trigonomtery. It is assumed that two
	 * motors are to be used.
	 * 
	 * @param leftMotor Left motor of the robot
	 * @param rightMotor Right motor of the robot
	 */
	public Odometer(EV3LargeRegulatedMotor leftMotor, EV3LargeRegulatedMotor rightMotor) {
		x = 0.0;
		y = 0.0;
		theta = 0.0;
		this.leftMotor = leftMotor;
		this.rightMotor = rightMotor;
		lock = new Object();
		this.leftMotor = leftMotor;
	}

	/**
	 * TODO
	 * @see java.lang.Thread#run()
	 */
	public void run() {
		long updateStart, updateEnd;
		double distL, distR, deltaD, deltaT, dX, dY;
		
		// reset tacho count at the start of each execution
		leftMotor.resetTachoCount();
		rightMotor.resetTachoCount();
		
		// set initial values of lastTacho
		lastTachoL = leftMotor.getTachoCount();
		lastTachoR = rightMotor.getTachoCount();
		
		
		while (true) {
			updateStart = System.currentTimeMillis();

			synchronized (lock) {
				// don't use the variables x, y, or theta anywhere but here!
				
				// get current tacho counts for each wheel
				nowTachoL = leftMotor.getTachoCount();
				nowTachoR = rightMotor.getTachoCount();
				
				// calculate left and right wheel displacements
				distL = Math.PI*W_RADIUS*(nowTachoL - lastTachoL)/180;
				distR = Math.PI*W_RADIUS*(nowTachoR - lastTachoR)/180;
				
				// save current tacho counts for next iteration
				lastTachoL = nowTachoL;
				lastTachoR = nowTachoR;
				
				// compute vehicle displacement
				deltaD = 0.5*(distL + distR);
				
				// compute change in heading
				deltaT = (distL - distR)/W_BASE;
				
				// update heading
				theta += deltaT;
				
				// compute x and y components of displacement
				dX = deltaD * Math.sin(theta);						
				dY = deltaD * Math.cos(theta);		
				
				// update x and y
				x += dX;											
				y += dY;
				
				// Bounded theta
				if (this.theta > (Math.PI * 2)) this.theta %= (Math.PI * 2);
				if (this.theta < 0) this.theta += (Math.PI * 2);
				
			}

			// this ensures that the odometer only runs once every period
			updateEnd = System.currentTimeMillis();
			if (updateEnd - updateStart < ODOMETER_PERIOD) {
				try {
					Thread.sleep(ODOMETER_PERIOD - (updateEnd - updateStart));
				} catch (InterruptedException e) {
					// there is nothing to be done here because it is not
					// expected that the odometer will be interrupted by
					// another thread
				}
			}
		}
	}

	/**
	 * Get the x-position reported by this odometer
	 * 
	 * @return X-position in cm reported by this odometer
	 */
	public double getX() {
		double result;

		synchronized (lock) {
			result = x;
		}

		return result;
	}

	/**
	 * Get the y-position reported by this odometer
	 * 
	 * @return Y-position in cm reported by this odometer
	 */
	public double getY() {
		double result;

		synchronized (lock) {
			result = y;
		}

		return result;
	}

	/**
	 * Get the heading reported by this odometer
	 * 
	 * @return Angle in radians reported by this odometer
	 */
	public double getTheta() {
		double result;

		synchronized (lock) {
			result = theta;
		}

		return result;
	}

	/**
	 * Set the x-position in cm of this odometer
	 */
	public void setX(double x) {
		synchronized (lock) {
			this.x = x;
		}
	}

	/**
	 * Set the y-position in cm of this odometer
	 */
	public void setY(double y) {
		synchronized (lock) {
			this.y = y;
		}
	}

	/**
	 * Set the angle in radians of his odometer
	 */
	public void setTheta(double theta) {
		synchronized (lock) {
			this.theta = theta;
		}
	}
	
	// delete after usage
	public EV3LargeRegulatedMotor getLM(){
		return leftMotor;
	}
	
	public EV3LargeRegulatedMotor getRM(){
		return rightMotor;
	}
}
