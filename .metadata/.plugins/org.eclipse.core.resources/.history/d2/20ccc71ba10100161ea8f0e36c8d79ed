package soccerbot;
import java.io.IOException;
import java.util.HashMap;

import wifi.WifiConnection;
import lejos.hardware.Button;
import lejos.hardware.Sound;
import lejos.hardware.ev3.LocalEV3;
import lejos.hardware.lcd.TextLCD;
import lejos.hardware.motor.EV3LargeRegulatedMotor;
import lejos.hardware.port.Port;
import lejos.hardware.sensor.EV3UltrasonicSensor;
import lejos.hardware.sensor.SensorModes;
import lejos.robotics.SampleProvider;
/**
 * Robonaldo instantiates all the threads and operations required at start-up of the program.
 * The initial parameters fed into the robot will be received in this class and be passed along to the rest of
 * the system. 
 */
public class Robonaldo {
	public static final TextLCD LCD = LocalEV3.get().getTextLCD();
	
	private static Object lock;
	
	// WIFI
	private static final String SERVER_IP = "192.168.10.131"; // CHANGE BACK!
	private static final int TEAM_NUMBER = 14;
	
	public static final EV3LargeRegulatedMotor loadMotor = new EV3LargeRegulatedMotor(LocalEV3.get().getPort("A"));
	public static final EV3LargeRegulatedMotor launchMotor = new EV3LargeRegulatedMotor(LocalEV3.get().getPort("D"));
	public static final EV3LargeRegulatedMotor leftMotor = new EV3LargeRegulatedMotor(LocalEV3.get().getPort("B"));
	public static final EV3LargeRegulatedMotor rightMotor = new EV3LargeRegulatedMotor(LocalEV3.get().getPort("C"));
	
	//US
	public static final Port usPortL = LocalEV3.get().getPort("S2");
	public static final Port usPortR = LocalEV3.get().getPort("S1");
	
	//Colorsensor Middle
	public static final Port colorPortM = LocalEV3.get().getPort("S3");	
	
	//Colorsensor T
	public static final Port colorPortT = LocalEV3.get().getPort("S4");	
	
	public static double WIDTH = 19.08;
	public static double RADIUS = 2.072;
	
	private final static int FAST = 200, SLOW = 100, REGULAR = 200, SMOOTH = 500, DEFAULT = 6000; 
	
	// field constants
	public static double MIN = -1;
	public static double MAX = 11;
	
	
	//parameters
	public static int BALL_LLX, BALL_LLY, BALL_URX, BALL_URY; // ball tile parameters
	public static double SHOOT_X1, SHOOT_Y1, SHOOT_X2, SHOOT_Y2; // shootin
	public static int SC; // starting corner
	public static int GOAL_WIDTH, D_LINE, O_LINE;
	public static String MODE = null;
	
	
	
	//MAIN METHOD
	public static void main(String[] args){
		
		// Game parameters (Obtained from hashtable)
		int BALL_LLX, BALL_LLY, BALL_URX, BALL_URY; // ball tile parameters
		double SHOOT_X1, SHOOT_Y1, SHOOT_X2, SHOOT_Y2; // shootin
		int SC; // starting corner
		int GOAL_WIDTH, D_LINE, O_LINE;
		String MODE = null;

		USPoller leftPoller = new USPoller(usPortL);
		USPoller rightPoller = new USPoller(usPortR);
		LSPoller leftCS = new LSPoller(colorPortT);
		LSPoller rightCS = new LSPoller(colorPortM);
		leftPoller.start(); rightPoller.start(); leftCS.start(); rightCS.start();
		
		Odometer odo = new Odometer(leftMotor, rightMotor); 
		Screen lcd = new Screen(odo);
		odo.start();
		lcd.start();
		
		Navigation navigate = new Navigation(odo,leftPoller, rightPoller, leftCS, rightCS, leftMotor, rightMotor);
		
		
		USLocalizer usLocalizer = new USLocalizer(odo, navigate, leftPoller, rightPoller);
		
		WifiConnection conn = null;
		try {
			conn = new WifiConnection(SERVER_IP, TEAM_NUMBER);
		} catch (IOException e) {
			//LCD.drawString("Connection failed", 0, 8);
		}
		
		LCD.clear();
		while(true){
			if (conn != null){
				HashMap<String,Integer> t = conn.StartData;
				if (t == null) {
					LCD.drawString("Failed to read transmission", 0, 5);
				} else {
					LCD.drawString("Transmission read", 0, 5);
					LCD.drawString(t.toString(), 0, 6);
					
					//////////
					if(t.get("OTN") == 14){
						SC = t.get("OSC");
						MODE = "ATTACK";
					}else{
						SC = t.get("DSC");
						MODE = "DEFENCE";
					}
					
					BALL_LLX = t.get("ll-x");
					BALL_LLY = t.get("ll-y");
					BALL_URX = t.get("ur-x");
					BALL_URY = t.get("ur-y");
					GOAL_WIDTH = t.get("w1");
					D_LINE = t.get("d1");
					O_LINE = t.get("d2");
					
					break;
					
				}
			} else {
				LCD.drawString("Connection failed", 0, 5);
			}
		}
		
		LightLocalizer lLocalizer = new LightLocalizer(odo, navigate, leftCS, rightCS, SC);
		usLocalizer.localize();
		lLocalizer.localize();
		
		// navigate to zone first
		
		if(MODE.equals("ATTACK")){
			//navigate to zone first
			if(SC == 3){
				navigate.travelTo(10, 4,true, true);
				navigate.travelTo(10, 1,true, true);
			}else if(SC == 4){
				navigate.travelTo(0, 4,true, true);
				navigate.travelTo(0, 1,true, true);
			}
			navigate.travelTo(5, 1, true, true);
			Sound.beep();
			
			// change values for demo
			//do all 4 corners first
			if(BALL_LLX == MIN){ // done
				if(BALL_LLY > (MAX-1)/2){
					navigate.travelTo(0, (O_LINE-1)/2, true, false);
				}
				navigate.travelTo(BALL_LLX+1,BALL_LLY-1,true, false);
				navigate.setSpeeds(200, 200, false, 6000);
				navigate.turnTo(0, 0);
				navigate.odometryCorrection((BALL_LLX+1)*30.5, (BALL_LLY-1)*30.5);
				navigate.goStraight(150,150, -4);
			}else if(BALL_URX == MAX) {
				if(BALL_LLY > (MAX-1)/2){
					navigate.travelTo(MAX-1, (O_LINE-1)/2, true, false);
				}
				navigate.travelTo(BALL_LLX,BALL_LLY-1,true, false);
				navigate.setSpeeds(200, 200, false, 6000);
				navigate.turnTo((MAX-1)*30.5, 0);
				navigate.odometryCorrection((BALL_LLX)*30.5, (BALL_LLY-1)*30.5);
	 			navigate.goStraight(150,150, 4);
			}else if(BALL_LLY == MIN){
				navigate.travelTo(BALL_LLX-1,BALL_LLY+1,true, false);
				navigate.setSpeeds(200, 200, false, 6000);
				navigate.turnTo(0, 0);
				navigate.odometryCorrection((BALL_LLX-1)*30.5, (BALL_LLY+1)*30.5);
				navigate.goStraight(150,150, 4);
			}else if(BALL_URY == MAX){
				if(BALL_LLX < (MAX-1)/2){
					navigate.travelTo(0, (MAX-1)/2, true, false);
					navigate.setSpeeds(200, 200, false, 6000);
					navigate.turnTo(0, MAX*30.5);
					navigate.odometryCorrection(0, ((MAX-1)/2)*30.5);
					navigate.travelTo(0, MAX-1, true, true);
					
				}else{
					navigate.travelTo(MAX-1, (MAX-1)/2, true, false);
					navigate.setSpeeds(200, 200, false, 6000);
					navigate.turnTo((MAX-1)*30.5, MAX*30.5);
					navigate.odometryCorrection((MAX-1)*30.5, ((MAX-1)/2)*30.5);
					navigate.travelTo(MAX-1, MAX-1, true, true);
				}
				navigate.travelTo(BALL_LLX+1,BALL_LLY,true, false);
				navigate.setSpeeds(200, 200, false, 6000);
				navigate.turnTo((MAX)*30.5, (MAX-1)*30.5);
				navigate.odometryCorrection((BALL_LLX+1)*30.5, (BALL_LLY)*30.5);
				navigate.goStraight(150,150, 4);
			}
			
			navigate.setSpeeds(200, 200, false, 6000);
			navigate.turnTo(Math.PI/2);
			
			navigate.goStraight(150,150,-20.3);
			
			SHOOT_X1 = (MAX-1)/2 - (double)(GOAL_WIDTH)/2;
			SHOOT_Y1 = MAX;
			SHOOT_X2 = (MAX-1)/2 + (double)(GOAL_WIDTH)/2;
			SHOOT_Y2 = MAX;
			
			Attacker attacker = new Attacker(navigate, loadMotor, launchMotor, SHOOT_X1, SHOOT_Y1, SHOOT_X2, SHOOT_Y2);
			attacker.attack();
			
		}else if(MODE.equals("DEFENCE")){
			//defence
			if(SC == 1){
				navigate.travelTo(0, 5,true, true);
				navigate.travelTo(0, 8, true, true);
				navigate.travelTo(5 - GOAL_WIDTH/2, 8, true, true);
			}else if(SC == 2){
				navigate.travelTo(10, 5,true, true);
				navigate.travelTo(10, 8, true, true);
				navigate.travelTo(10 - (5 + GOAL_WIDTH/2), 8, true, true);
//				navigate.setSpeeds(200, 200, false, 6000);
//				navigate.turnTo(Math.PI);
			}else if(SC == 3){
				navigate.travelTo(10, 8, true, true);
				navigate.travelTo(10 - ((MAX-1)/2 + GOAL_WIDTH/2), 8, true, true);
			}else if(SC == 4){
				navigate.travelTo(0, 8, true, true);
				navigate.travelTo(10 - ((MAX-1)/2 - GOAL_WIDTH/2), 8, true, true);
//				navigate.setSpeeds(200, 200, false, 6000);
//				navigate.turnTo(Math.PI);
			}
						
			Sound.beep();
			
			loadMotor.setSpeed(100);
			loadMotor.rotate(150); loadMotor.setSpeed(0); loadMotor.forward();
			int i=0;
			while(i<9000000){
				navigate.goStraight(300, 300, GOAL_WIDTH*30.5);
				navigate.goStraight(300, 300, -GOAL_WIDTH*30.5);
				i++;
			}
			
		}
		
		navigate.travelTo(0,0,true, false);
		
	}
	
	/**
	 * Convert absolute angle on place to degrees each wheel is required to turn based
	 * on the radius of the wheel to be rotated and the width of the robot.
	 * Through the angle and the width we can calculate the distance required to move using
	 * (width * angle) / 2.0
	 * 
	 * @param radius Radius of wheel being rotated in cm
	 * @param width Wheel-to-wheel distance measured in cm from the center of each wheel
	 * @param angle Absolute angle to be rotated in radians
	 * @return Degrees wheel is required to rotate
	 * @see convertDistance(dobule radius, double distance)
	 * 
	 */ 
	private static int convertAngle(double radius, double width, double angle) {
		return convertDistance(radius, width * angle / 2);
	}
	
	/**
	 * Convert absolute distance in cm into degrees the wheels are required based
	 * on the radius of the wheel to be rotated.
	 * Equation used is (180.0 * distance) / (pi * radius)
	 * 
	 * @param radius Radius of wheel being rotated in cm
	 * @param distance Absolute distance in cm
	 * @return Degrees wheel is required to rotate
	 */
	private static int convertDistance(double radius, double distance) {
		return (int) ((180.0 * distance) / (Math.PI * radius));
	}
	
	/**
	 * Retrieves each motor object. Assumes only 2 motor objects on each side of the robot are connected. 
	 * 
	 * @return Array of size 2 representing each motor object starting with the left one.
	 */
	public static EV3LargeRegulatedMotor[] getMotors(){
		EV3LargeRegulatedMotor[] m = {leftMotor, rightMotor};
		return m;
	}
	
	
}
