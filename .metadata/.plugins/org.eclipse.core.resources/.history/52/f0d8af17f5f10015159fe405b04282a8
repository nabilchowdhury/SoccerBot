package localizationtest;

/*File: Navigation.java
 * Written by: Sean Lawlor
 * ECSE 211 - Design Principles and Methods, Head TA
 * Fall 2011
 * Ported to EV3 by: Francois Ouellet Delorme
 * Fall 2015
 * 
 * Movement control class (turnTo, travelTo, flt, localize)
 */
import lejos.hardware.motor.EV3LargeRegulatedMotor;

public class Navigation {
	final static int FAST = 200, SLOW = 100, ACCELERATION = 4000;
	final static double DEG_ERR = 3.0, CM_ERR = 1.0;
	private Odometer odometer;
	private EV3LargeRegulatedMotor leftMotor, rightMotor;
	
	private final double WHEEL_RADIUS = 2.096;
	private final double TRACK = 15.92;

	public Navigation(Odometer odo) {
		this.odometer = odo;

		EV3LargeRegulatedMotor[] motors = this.odometer.getMotors();
		this.leftMotor = motors[0];
		this.rightMotor = motors[1];

		// set acceleration
		this.leftMotor.setAcceleration(ACCELERATION);
		this.rightMotor.setAcceleration(ACCELERATION);
	}

	/*
	 * Functions to set the motor speeds jointly
	 */
	public void setSpeeds(float lSpd, float rSpd) {
		this.leftMotor.setSpeed(lSpd);
		this.rightMotor.setSpeed(rSpd);
		

		if(lSpd == 0 && rSpd == 0){
			stop();
		}
		
		if (lSpd < 0)
			this.leftMotor.forward();
		else
			this.leftMotor.backward();
		if (rSpd < 0)
			this.rightMotor.forward();
		else
			this.rightMotor.backward();
	}

	public void setSpeeds(int lSpd, int rSpd) {
		this.leftMotor.setSpeed(lSpd);
		this.rightMotor.setSpeed(rSpd);
		
		if(lSpd == 0 && rSpd == 0){
			stop();
		}
		
		if (lSpd < 0){
			this.leftMotor.forward();
		}else{
			this.leftMotor.backward();
		}
		
		if (rSpd < 0){
			this.rightMotor.forward();
		}else{
			this.rightMotor.backward();
		}
	}

	/*
	 * Float the two motors jointly
	 */
	public void setFloat() {
		this.leftMotor.stop();
		this.rightMotor.stop();
		this.leftMotor.flt(true);
		this.rightMotor.flt(true);
	}

	/*
	 * TravelTo function which takes as arguments the x and y position in cm Will travel to designated position, while
	 * constantly updating it's heading
	 */
	public void travelTo(double x, double y) {
		double minAng;
		while (Math.abs(x - odometer.getX()) > CM_ERR || Math.abs(y - odometer.getY()) > CM_ERR) {
			minAng = (Math.atan2(y - odometer.getY(), x - odometer.getX())) * (180.0 / Math.PI);
			if (minAng < 0)
				minAng += 360.0;
			this.turnTo(minAng, false);
			this.setSpeeds(SLOW, SLOW);
		}
		stop();
	}

	/*
	 * TurnTo function which takes an angle and boolean as arguments The boolean controls whether or not to stop the
	 * motors when the turn is completed
	 */
	public void turnTo(double angle, boolean stop) {
		
		leftMotor.setSpeed(SLOW);
		rightMotor.setSpeed(SLOW);
		
		double error = angle - this.odometer.getAng();

		while (Math.abs(error) > DEG_ERR) {

			error = angle - this.odometer.getAng();

			if (error < -180.0) {
				this.setSpeeds(-SLOW, SLOW);
			} else if (error < 0.0) {
				this.setSpeeds(SLOW, -SLOW);
			} else if (error > 180.0) {
				this.setSpeeds(SLOW, -SLOW);
			} else {
				this.setSpeeds(-SLOW, SLOW);
			}
		}

		if (stop) {
			stop();
		}
	}
	
	/*
	 * Go forward a set distance in cm
	 */
	public void goForward(double distance) {
		this.travelTo(Math.cos(Math.toRadians(this.odometer.getAng())) * distance, Math.cos(Math.toRadians(this.odometer.getAng())) * distance);

	}
	
	/*
	 * Drives forward indefinitely
	 */
	public void drive(boolean isForward){
		leftMotor.setSpeed(SLOW);
		rightMotor.setSpeed(SLOW);
		if(isForward == true){
			leftMotor.backward();
			rightMotor.backward();
		}else{
			leftMotor.forward();
			rightMotor.forward();
		}
	}
	
	/*
	 * Stops robot on current position
	 */
	public void stop(){
		leftMotor.setSpeed(0);
		rightMotor.setSpeed(0);
		leftMotor.backward();
		rightMotor.backward();
	}
	
	/*
	 * Turns robot a fixed angle in radians
	 */
	public void turnToRelative(double theta, boolean block){	
		leftMotor.setSpeed(60);
		rightMotor.setSpeed(60);
		leftMotor.rotate(-convertAngle(WHEEL_RADIUS, TRACK, theta), true);	
		rightMotor.rotate(convertAngle(WHEEL_RADIUS, TRACK, theta), block);
	}
	
	/*
	 * Helper methods used for method turnToRelative
	 */
	public int convertDistance(double radius, double distance) {
		return (int) ((180.0 * distance) / (Math.PI * radius));
	}
	
	public int convertAngle(double radius, double width, double angle) {
		return convertDistance(radius, width * angle / 2);
	}
	
	/*
	 * Goes forward a set distance in cm
	 */
	public void goFwd(double distance){
		leftMotor.setSpeed(100);
		rightMotor.setSpeed(100);
		leftMotor.rotate(-convertDistance(WHEEL_RADIUS, distance), true);
		rightMotor.rotate(-convertDistance(WHEEL_RADIUS, distance), false);
	}
}
