package soccerbot;
import lejos.hardware.Button;
import lejos.hardware.ev3.LocalEV3;
import lejos.hardware.lcd.TextLCD;
import lejos.hardware.motor.EV3LargeRegulatedMotor;
import lejos.hardware.port.Port;
import lejos.hardware.sensor.EV3UltrasonicSensor;
import lejos.hardware.sensor.SensorModes;
import lejos.robotics.SampleProvider;
/**
 * Robonaldo instantiates all the threads and operations required at start-up of the program.
 * The initial parameters fed into the robot will be received in this class and be passed along to the rest of
 * the system. 
 */
public class Robonaldo {
	
	public static final EV3LargeRegulatedMotor loadMotor = new EV3LargeRegulatedMotor(LocalEV3.get().getPort("A"));
	//public static final EV3LargeRegulatedMotor launchMotor = new EV3LargeRegulatedMotor(LocalEV3.get().getPort("D"));
	public static final EV3LargeRegulatedMotor leftMotor = new EV3LargeRegulatedMotor(LocalEV3.get().getPort("C"));
	public static final EV3LargeRegulatedMotor rightMotor = new EV3LargeRegulatedMotor(LocalEV3.get().getPort("B"));
	
	//US
	private static final Port usPort = LocalEV3.get().getPort("S2");
	static SensorModes usSensor = new EV3UltrasonicSensor(usPort);
	static SampleProvider usValue = usSensor.getMode("Distance");			
	float[] usData = new float[usValue.sampleSize()];	
	
	
	public static double WIDTH = 18.8;
	public static double RADIUS = 2.072;
	
	private final static int FAST = 200, SLOW = 100, REGULAR = 160, SMOOTH = 2000, DEFAULT = 6000; 

	public static TextLCD t = LocalEV3.get().getTextLCD();
	
	//MAIN METHOD
	public static void main(String[] args){
		while(true){
			t.drawString("Dist: "+getFilteredData(), 0, 0);
		}
		
	}
	
	
	private static int convertAngle(double radius, double width, double angle) {
		return convertDistance(radius, width * angle / 2);
	}
	
	private static int convertDistance(double radius, double distance) {
		return (int) ((180.0 * distance) / (Math.PI * radius));
	}
	
	public static EV3LargeRegulatedMotor[] getMotors(){
		EV3LargeRegulatedMotor[] m = {leftMotor, rightMotor};
		return m;
	}
	
	public static float getFilteredData() {
		usSensor.fetchSample(usData, 0);
		float distance = usData[0]*100;	// converts to cm
		
		if(distance > 50){
			distance = 50;
		}
		
		return distance;
	}
}
