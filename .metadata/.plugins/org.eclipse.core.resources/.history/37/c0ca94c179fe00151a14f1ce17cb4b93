package soccerbot;

import lejos.hardware.Button;
import lejos.hardware.Sound;
import lejos.hardware.ev3.LocalEV3;
import lejos.hardware.lcd.TextLCD;
import lejos.hardware.motor.EV3LargeRegulatedMotor;
import lejos.hardware.port.Port;
import lejos.hardware.sensor.EV3ColorSensor;
import lejos.hardware.sensor.SensorModes;
import lejos.robotics.SampleProvider;

/**
 * <code>LightLocalizer</code> is in charge of using the color sensor to perform localization. This is performed
 * after the localization of this robot using the ultrasonic sensor.
 * <p>
 * TODO: Describe and detail light localization process.
 * 
 * @author Omar Akkila
 * @author Nabil Chowdhury
 *
 */
public class LightLocalizer{
	private Odometer odo;
	private Navigation navigate;
	
	private LSPoller leftCS;
	private LSPoller rightCS;
	
	private int startingCorner;
	
	
	/**
	 * This constructor requires the <code>Odometer</code> object to update its position, a <code>Navigation</code> object to control the motors during localization,
	 * two <code>LSPoller</code> objects to detect grid lines, and an integer representing the starting corner to perform the proper localization process
	 * 
	 * @param odo The <code>Odometer</code> object to be passed
	 * @param navigate The <code>Navigation</code> object to be passed
	 * @param leftCS The <code>LSPoller</code> object representing the left EV3 Color Sensor to be passed
	 * @param rightCS The <code>LSPoller</code> object representing the right EV3 Color Sensor to be passed
	 * @param startingCorner Integer between 1-4 representing the four corners of the field;
	 * 						 Bottom-left = 1, Bottom-Right = 2, Top-Left = 3, Top-Right = 4
	 */
	public LightLocalizer(Odometer odo, Navigation navigate, LSPoller leftCS, LSPoller rightCS, int startingCorner) {
		this.odo = odo;
		this.navigate = navigate;
		this.leftCS = leftCS;
		this.rightCS = rightCS;
		this.startingCorner = startingCorner;	
	}
	
	/**
	 * Performs the localization process.
	 */
	public void localize() {

		// LOCALIZATION ROUTINE 1
		
		// Back into wall to straighten angle
		navigate.goStraight(300,300, -23);
		
		// Go forward and use first grid line to fix angle
		navigate.correctAngle(2, true);
		
		// Go straight 3 cm after angle fix. (may not be needed) 
		//navigate.goStraight(200, 200, 3);		
		
		// Turn by 90 deg
		navigate.setSpeeds(200, 200, false, 6000);
		navigate.turnTo(Math.PI/2);
		
		// Reverse by 4 cm to get behind grid line
		navigate.goStraight(200, 200, -4);
		
		// Go forward until gridline is detected. Also use grid line to fix angle
		navigate.correctAngle(2, true);
		
		// Go forward until robot's wheels (center of rotation) are on grid line
		navigate.goStraight(220, 220, 11.7);
		
		// Start turning counterclockwise
		navigate.setSpeeds(-180, 180, true, 6000);
		
		// Turn until perpendicular grid line is detected. This is always the 2nd gridline during the turn
		int count = 0;
		while(true){
			if(count == 2){
				navigate.stopMotors();
				break;
			}
			if(leftCS.getDifferentialData() > 0.13){
				count++;
				Sound.beep();
			}
		}
		
		// Correct angle after detecting 2nd gridline
		navigate.setSpeeds(150, 150, false, 6000);
		navigate.turnTo(Math.toRadians(-14));	
		
		// Go forward until robot's wheels are on the grid lines. This finishes localization
		navigate.goStraight(150, 150, 11.6);	
		//END ROUTINE 1
		
		
		/*
		// LOCALIZATION ROUTINE 2
		// Back into wall to straighten angle
		navigate.goStraight(300,300, -23);
		
		// Go forward and use first grid line to fix angle
		navigate.correctAngle(2, true);
		
		// Go forward until wheels are on previously detected grid line
		navigate.goStraight(150,150,10.7);
		
		// Turn by 90 deg to face 2nd grid line
		navigate.setSpeeds(200, 200, false, 6000);
		navigate.turnTo(Math.PI/2);
		
		// Go forward and use grid lines to fix angle
		navigate.correctAngle(2, true);
		
		// Go forward until wheels are on previously detected grid line
		navigate.goStraight(150,150,10.7);
		// END ROUTINE 2*/
		
		// Set coordinates depending on starting corner
		// fix for actual competition
		if(this.startingCorner == 1){
			double[] position = {0.0, 0.0, 0.0};
			boolean[] update = {true, true, true};
			odo.setPosition(position, update);
		}else if(this.startingCorner == 2){
			double[] position = {6*30.45, 0.0, 3*Math.PI/2};
			boolean[] update = {true, true, true};
			odo.setPosition(position, update);
		}else if(this.startingCorner == 3){
			double[] position = {6*30.45, 6*30.45, Math.PI};
			boolean[] update = {true, true, true};
			odo.setPosition(position, update);
		}else if(this.startingCorner == 4){
			double[] position = {0.0, 6*30.45, Math.PI/2};
			boolean[] update = {true, true, true};
			odo.setPosition(position, update);
		}
		
		// Beep to signify the end of Localization
		Sound.beep();
		
	}
	
}
