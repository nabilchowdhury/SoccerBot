package navigationtest;
/*
 * Odometer.java
 */
import lejos.hardware.Button;
import lejos.hardware.ev3.LocalEV3;
import lejos.hardware.lcd.TextLCD;
import lejos.hardware.motor.EV3LargeRegulatedMotor;
import lejos.hardware.port.MotorPort;

/*
 * DPM LAB 3
 * Group 33
 * Abbas Yadollahi(ID: 260680343) & Nabil Chowdhury(ID: 260622155)
 */

public class Odometer extends Thread{
	// robot position
	private double x, y, theta;		// Position variables
	static TextLCD t = LocalEV3.get().getTextLCD();	

	// odometer update period, in ms
	private static final long ODOMETER_PERIOD = 20;
	
	// constants/robot dimension values
	private static final double W_BASE = 15.92;	//15.92
	private static final double W_RADIUS = 2.096;
	
	// class variables
	private EV3LargeRegulatedMotor leftMotor;
	private EV3LargeRegulatedMotor rightMotor;
	private int lastTachoL;			// Tacho L at last sample
	private int lastTachoR;			// Tacho R at last sample 
	private int nowTachoL;			// Current tacho L
	private int nowTachoR;			// Current tacho R
	double distL, distR; 
	double deltaD, deltaT; 
	double dX, dY;
	double thetaDisplay;
	
	
	// lock object for mutual exclusion
	private Object lock;
	
	private int status;

	// default constructor
	public Odometer(EV3LargeRegulatedMotor leftMotor, EV3LargeRegulatedMotor rightMotor) {	//initialize odometer at current position
		x = 0.0;
		y = 0.0;
		theta = 0.0;
		this.leftMotor = leftMotor;
		this.rightMotor = rightMotor;
		lock = new Object();
	}

	// run method (required for Thread)
	public void run() {
		long updateStart, updateEnd;
	    
		// Reset the tacho count at the start of each execution. Tacho counts are inverted due to robot build.
	    this.leftMotor.resetTachoCount();
	    this.rightMotor.resetTachoCount();
	    lastTachoL=-this.leftMotor.getTachoCount();	// Inverted due to robot build
	    lastTachoR=-this.rightMotor.getTachoCount();

	    //enter display loop
		while (true) {
			status = Button.readButtons();  // Terminate program on ENTER button
	    	if (status == Button.ID_ENTER) {
	    		System.exit(0);
	    	}
			updateStart = System.currentTimeMillis();
			
			
			synchronized (lock) {				
				nowTachoL = -this.leftMotor.getTachoCount();      		// Get tacho counts
				nowTachoR = -this.rightMotor.getTachoCount();
				distL = 3.14159*W_RADIUS*(nowTachoL-lastTachoL)/180;	// Compute L and R wheel displacements
				distR = 3.14159*W_RADIUS*(nowTachoR-lastTachoR)/180;
				lastTachoL=nowTachoL;								// Save tacho counts for next iteration
				lastTachoR=nowTachoR;
				deltaD = 0.5*(distL+distR);							// Compute vehicle displacement
				deltaT = (distL-distR)/W_BASE;						// Compute change in heading
				theta += deltaT;									// Update heading
			    dX = deltaD * Math.sin(theta);						// Compute X component of displacement
				dY = deltaD * Math.cos(theta);						// Compute Y component of displacement
				x += dX;											// Update estimates of X and Y position
				y += dY;
				
				// Theta cannot exceed 2pi (2 decimal precision) and is always positive (0, 2pi]
				thetaDisplay = Math.abs(theta);
				if(thetaDisplay > 2*Math.PI){
					thetaDisplay = (double)Math.round(thetaDisplay%(2*Math.PI)*100d)/100d;
				}
				
			}

			// This ensures that the odometer only runs once every period
			updateEnd = System.currentTimeMillis();
			if (updateEnd - updateStart < ODOMETER_PERIOD) {
				try {
					Thread.sleep(ODOMETER_PERIOD - (updateEnd - updateStart));
				} catch (InterruptedException e) {
					/* There is nothing to be done here because it is not
					 expected that the odometer will be interrupted by
					 another thread*/
				}
			}
		}
	}

	// Accessors
	public void getPosition(double[] position, boolean[] update) {
		// ensure that the values don't change while the odometer is running
		synchronized (lock) {
			if (update[0])
				position[0] = x;
			if (update[1])
				position[1] = y;
			if (update[2])
				position[2] = thetaDisplay;
		}
	}

	// Returns x position
	public double getX() {
		double result;

		synchronized (lock) {
			result = x;
		}

		return result;
	}

	// Returns y position
	public double getY() {
		double result;

		synchronized (lock) {
			result = y;
		}

		return result;
	}
	// Returns angle (in radians)
	public double getTheta() {
		double result;

		synchronized (lock) {
			result = theta;
		}

		return result;
	}

	// Mutators
	public void setPosition(double[] position, boolean[] update) {
		// Ensure that the values don't change while the odometer is running
		synchronized (lock) {
			if (update[0])
				x = position[0];
			if (update[1])
				y = position[1];
			if (update[2])
				theta = position[2];
		}
	}

	// Set methods used for odometer corrections
	public void setX(double x) {
		synchronized (lock) {
			this.x = x;
		}
	}

	public void setY(double y) {
		synchronized (lock) {
			this.y = y;
		}
	}

	public void setTheta(double theta) {
		synchronized (lock) {
			this.theta = theta;
		}
	}
}
